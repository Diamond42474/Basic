
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000098  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  00000098  0000010c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000024  00000000  00000000  00000112  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000138  2**2
                  CONTENTS, READONLY, OCTETS
  4 .debug_aranges 00000068  00000000  00000000  00000178  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  5 .debug_info   00000779  00000000  00000000  000001e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  6 .debug_abbrev 000005e0  00000000  00000000  00000959  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_line   000003d6  00000000  00000000  00000f39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_frame  00000044  00000000  00000000  00001310  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_str    00000396  00000000  00000000  00001354  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_loc    0000012e  00000000  00000000  000016ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_ranges 00000048  00000000  00000000  00001818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	20 c0       	rjmp	.+64     	; 0x44 <__bad_interrupt>
   4:	1f c0       	rjmp	.+62     	; 0x44 <__bad_interrupt>
   6:	1e c0       	rjmp	.+60     	; 0x44 <__bad_interrupt>
   8:	1d c0       	rjmp	.+58     	; 0x44 <__bad_interrupt>
   a:	1c c0       	rjmp	.+56     	; 0x44 <__bad_interrupt>
   c:	1b c0       	rjmp	.+54     	; 0x44 <__bad_interrupt>
   e:	1a c0       	rjmp	.+52     	; 0x44 <__bad_interrupt>
  10:	19 c0       	rjmp	.+50     	; 0x44 <__bad_interrupt>
  12:	18 c0       	rjmp	.+48     	; 0x44 <__bad_interrupt>
  14:	17 c0       	rjmp	.+46     	; 0x44 <__bad_interrupt>
  16:	16 c0       	rjmp	.+44     	; 0x44 <__bad_interrupt>
  18:	15 c0       	rjmp	.+42     	; 0x44 <__bad_interrupt>
  1a:	14 c0       	rjmp	.+40     	; 0x44 <__bad_interrupt>
  1c:	13 c0       	rjmp	.+38     	; 0x44 <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d2 e0       	ldi	r29, 0x02	; 2
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61

0000002a <__do_copy_data>:
  2a:	10 e0       	ldi	r17, 0x00	; 0
  2c:	a0 e6       	ldi	r26, 0x60	; 96
  2e:	b0 e0       	ldi	r27, 0x00	; 0
  30:	e8 e9       	ldi	r30, 0x98	; 152
  32:	f0 e0       	ldi	r31, 0x00	; 0
  34:	02 c0       	rjmp	.+4      	; 0x3a <__do_copy_data+0x10>
  36:	05 90       	lpm	r0, Z+
  38:	0d 92       	st	X+, r0
  3a:	a6 36       	cpi	r26, 0x66	; 102
  3c:	b1 07       	cpc	r27, r17
  3e:	d9 f7       	brne	.-10     	; 0x36 <__do_copy_data+0xc>
  40:	21 d0       	rcall	.+66     	; 0x84 <main>
  42:	28 c0       	rjmp	.+80     	; 0x94 <_exit>

00000044 <__bad_interrupt>:
  44:	dd cf       	rjmp	.-70     	; 0x0 <__vectors>

00000046 <delay_ms>:
       		delay_ms(delay); 
		}
		*/
    } 
}
void delay_ms(int ms ){
  46:	9c 01       	movw	r18, r24
   	for (int i = 0; i < ms; i++){
  48:	90 e0       	ldi	r25, 0x00	; 0
  4a:	80 e0       	ldi	r24, 0x00	; 0
  4c:	82 17       	cp	r24, r18
  4e:	93 07       	cpc	r25, r19
  50:	0c f0       	brlt	.+2      	; 0x54 <delay_ms+0xe>
      	_delay_ms(1);
   	}
}
  52:	08 95       	ret
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  54:	ef ec       	ldi	r30, 0xCF	; 207
  56:	f7 e0       	ldi	r31, 0x07	; 7
  58:	31 97       	sbiw	r30, 0x01	; 1
  5a:	f1 f7       	brne	.-4      	; 0x58 <delay_ms+0x12>
  5c:	00 c0       	rjmp	.+0      	; 0x5e <delay_ms+0x18>
  5e:	00 00       	nop
   	for (int i = 0; i < ms; i++){
  60:	01 96       	adiw	r24, 0x01	; 1
  62:	f4 cf       	rjmp	.-24     	; 0x4c <delay_ms+0x6>

00000064 <change>:
void change(int x, int port){
	if(x==0){
  64:	21 e0       	ldi	r18, 0x01	; 1
  66:	30 e0       	ldi	r19, 0x00	; 0
  68:	01 c0       	rjmp	.+2      	; 0x6c <change+0x8>
  6a:	22 0f       	add	r18, r18
  6c:	6a 95       	dec	r22
  6e:	ea f7       	brpl	.-6      	; 0x6a <change+0x6>
  70:	89 2b       	or	r24, r25
  72:	29 f4       	brne	.+10     	; 0x7e <change+0x1a>
		PORTB &=~(1<<port);
  74:	88 b3       	in	r24, 0x18	; 24
  76:	20 95       	com	r18
  78:	28 23       	and	r18, r24
	}else{
		PORTB |=(1<<port);
  7a:	28 bb       	out	0x18, r18	; 24
	}
}  
  7c:	08 95       	ret
		PORTB |=(1<<port);
  7e:	88 b3       	in	r24, 0x18	; 24
  80:	28 2b       	or	r18, r24
  82:	fb cf       	rjmp	.-10     	; 0x7a <change+0x16>

00000084 <main>:
	DDRB = 0b000111;
  84:	87 e0       	ldi	r24, 0x07	; 7
  86:	87 bb       	out	0x17, r24	; 23
		if(PINB & (1<<3)){
  88:	b3 9b       	sbis	0x16, 3	; 22
  8a:	02 c0       	rjmp	.+4      	; 0x90 <main+0xc>
		PORTB |=(1<<port);
  8c:	c2 9a       	sbi	0x18, 2	; 24
}  
  8e:	fc cf       	rjmp	.-8      	; 0x88 <main+0x4>
		PORTB &=~(1<<port);
  90:	c2 98       	cbi	0x18, 2	; 24
}  
  92:	fa cf       	rjmp	.-12     	; 0x88 <main+0x4>

00000094 <_exit>:
  94:	f8 94       	cli

00000096 <__stop_program>:
  96:	ff cf       	rjmp	.-2      	; 0x96 <__stop_program>
