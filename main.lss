
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000176  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  00000176  000001ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000024  00000000  00000000  000001f0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000214  2**2
                  CONTENTS, READONLY, OCTETS
  4 .debug_aranges 00000068  00000000  00000000  00000250  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  5 .debug_info   00000ba3  00000000  00000000  000002b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  6 .debug_abbrev 00000685  00000000  00000000  00000e5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_line   0000079f  00000000  00000000  000014e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_frame  00000064  00000000  00000000  00001c80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_str    000003a7  00000000  00000000  00001ce4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_loc    00000378  00000000  00000000  0000208b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_ranges 00000048  00000000  00000000  00002403  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	20 c0       	rjmp	.+64     	; 0x44 <__bad_interrupt>
   4:	1f c0       	rjmp	.+62     	; 0x44 <__bad_interrupt>
   6:	1e c0       	rjmp	.+60     	; 0x44 <__bad_interrupt>
   8:	1d c0       	rjmp	.+58     	; 0x44 <__bad_interrupt>
   a:	1c c0       	rjmp	.+56     	; 0x44 <__bad_interrupt>
   c:	1b c0       	rjmp	.+54     	; 0x44 <__bad_interrupt>
   e:	1a c0       	rjmp	.+52     	; 0x44 <__bad_interrupt>
  10:	19 c0       	rjmp	.+50     	; 0x44 <__bad_interrupt>
  12:	18 c0       	rjmp	.+48     	; 0x44 <__bad_interrupt>
  14:	17 c0       	rjmp	.+46     	; 0x44 <__bad_interrupt>
  16:	16 c0       	rjmp	.+44     	; 0x44 <__bad_interrupt>
  18:	15 c0       	rjmp	.+42     	; 0x44 <__bad_interrupt>
  1a:	14 c0       	rjmp	.+40     	; 0x44 <__bad_interrupt>
  1c:	13 c0       	rjmp	.+38     	; 0x44 <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d2 e0       	ldi	r29, 0x02	; 2
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61

0000002a <__do_copy_data>:
  2a:	10 e0       	ldi	r17, 0x00	; 0
  2c:	a0 e6       	ldi	r26, 0x60	; 96
  2e:	b0 e0       	ldi	r27, 0x00	; 0
  30:	e6 e7       	ldi	r30, 0x76	; 118
  32:	f1 e0       	ldi	r31, 0x01	; 1
  34:	02 c0       	rjmp	.+4      	; 0x3a <__do_copy_data+0x10>
  36:	05 90       	lpm	r0, Z+
  38:	0d 92       	st	X+, r0
  3a:	a6 36       	cpi	r26, 0x66	; 102
  3c:	b1 07       	cpc	r27, r17
  3e:	d9 f7       	brne	.-10     	; 0x36 <__do_copy_data+0xc>
  40:	3a d0       	rcall	.+116    	; 0xb6 <main>
  42:	97 c0       	rjmp	.+302    	; 0x172 <_exit>

00000044 <__bad_interrupt>:
  44:	dd cf       	rjmp	.-70     	; 0x0 <__vectors>

00000046 <change.part.0>:
      	_delay_ms(1);
   	}
}
void change(int x, int port){
	if(x==0){
		PORTB &=~(1<<port);
  46:	98 b3       	in	r25, 0x18	; 24
  48:	21 e0       	ldi	r18, 0x01	; 1
  4a:	30 e0       	ldi	r19, 0x00	; 0
  4c:	01 c0       	rjmp	.+2      	; 0x50 <change.part.0+0xa>
  4e:	22 0f       	add	r18, r18
  50:	8a 95       	dec	r24
  52:	ea f7       	brpl	.-6      	; 0x4e <change.part.0+0x8>
  54:	20 95       	com	r18
  56:	29 23       	and	r18, r25
  58:	28 bb       	out	0x18, r18	; 24
	}else{
		PORTB |=(1<<port);
	}
}  
  5a:	08 95       	ret

0000005c <delay_ms>:
void delay_ms(int ms ){
  5c:	9c 01       	movw	r18, r24
   	for (int i = 0; i < ms; i++){
  5e:	90 e0       	ldi	r25, 0x00	; 0
  60:	80 e0       	ldi	r24, 0x00	; 0
  62:	82 17       	cp	r24, r18
  64:	93 07       	cpc	r25, r19
  66:	0c f0       	brlt	.+2      	; 0x6a <delay_ms+0xe>
}
  68:	08 95       	ret
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  6a:	ef ec       	ldi	r30, 0xCF	; 207
  6c:	f7 e0       	ldi	r31, 0x07	; 7
  6e:	31 97       	sbiw	r30, 0x01	; 1
  70:	f1 f7       	brne	.-4      	; 0x6e <delay_ms+0x12>
  72:	00 c0       	rjmp	.+0      	; 0x74 <delay_ms+0x18>
  74:	00 00       	nop
   	for (int i = 0; i < ms; i++){
  76:	01 96       	adiw	r24, 0x01	; 1
  78:	f4 cf       	rjmp	.-24     	; 0x62 <delay_ms+0x6>

0000007a <change>:
void change(int x, int port){
  7a:	9c 01       	movw	r18, r24
  7c:	97 2f       	mov	r25, r23
	if(x==0){
  7e:	23 2b       	or	r18, r19
  80:	11 f4       	brne	.+4      	; 0x86 <change+0xc>
  82:	86 2f       	mov	r24, r22
  84:	e0 cf       	rjmp	.-64     	; 0x46 <change.part.0>
		PORTB |=(1<<port);
  86:	88 b3       	in	r24, 0x18	; 24
  88:	21 e0       	ldi	r18, 0x01	; 1
  8a:	30 e0       	ldi	r19, 0x00	; 0
  8c:	01 c0       	rjmp	.+2      	; 0x90 <change+0x16>
  8e:	22 0f       	add	r18, r18
  90:	6a 95       	dec	r22
  92:	ea f7       	brpl	.-6      	; 0x8e <change+0x14>
  94:	82 2b       	or	r24, r18
  96:	88 bb       	out	0x18, r24	; 24
}  
  98:	08 95       	ret

0000009a <get_button>:
get_button(int port){
	if(!(PINB & (1<<port))){
  9a:	26 b3       	in	r18, 0x16	; 22
  9c:	30 e0       	ldi	r19, 0x00	; 0
  9e:	a9 01       	movw	r20, r18
  a0:	02 c0       	rjmp	.+4      	; 0xa6 <get_button+0xc>
  a2:	55 95       	asr	r21
  a4:	47 95       	ror	r20
  a6:	8a 95       	dec	r24
  a8:	e2 f7       	brpl	.-8      	; 0xa2 <get_button+0x8>
  aa:	ca 01       	movw	r24, r20
  ac:	80 95       	com	r24
  ae:	90 95       	com	r25
		return true;
	}else{
		return false;
	}
}
  b0:	81 70       	andi	r24, 0x01	; 1
  b2:	99 27       	eor	r25, r25
  b4:	08 95       	ret

000000b6 <main>:
	DDRB = 0b000111; // sets 0-2 as outputs
  b6:	87 e0       	ldi	r24, 0x07	; 7
  b8:	87 bb       	out	0x17, r24	; 23
	PORTB |= (1 << 3); // enables pull-up resistor
  ba:	c3 9a       	sbi	0x18, 3	; 24
		if(get_button(3)){
  bc:	83 e0       	ldi	r24, 0x03	; 3
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	ec df       	rcall	.-40     	; 0x9a <get_button>
  c2:	89 2b       	or	r24, r25
  c4:	09 f4       	brne	.+2      	; 0xc8 <main+0x12>
  c6:	4d c0       	rjmp	.+154    	; 0x162 <main+0xac>
	if(x==0){
  c8:	82 e0       	ldi	r24, 0x02	; 2
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	bc df       	rcall	.-136    	; 0x46 <change.part.0>
			int delay = start;
  ce:	c0 91 62 00 	lds	r28, 0x0062	; 0x800062 <start>
  d2:	d0 91 63 00 	lds	r29, 0x0063	; 0x800063 <start+0x1>
			for(int i=0;i<scale&&get_button(3);i++){
  d6:	10 e0       	ldi	r17, 0x00	; 0
  d8:	00 e0       	ldi	r16, 0x00	; 0
  da:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <scale>
  de:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <scale+0x1>
  e2:	08 17       	cp	r16, r24
  e4:	19 07       	cpc	r17, r25
  e6:	1c f1       	brlt	.+70     	; 0x12e <main+0x78>
  e8:	10 e0       	ldi	r17, 0x00	; 0
  ea:	00 e0       	ldi	r16, 0x00	; 0
			for(int i=0;i<scale&&get_button(3);i++){
  ec:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <scale>
  f0:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <scale+0x1>
  f4:	08 17       	cp	r16, r24
  f6:	19 07       	cpc	r17, r25
  f8:	0c f7       	brge	.-62     	; 0xbc <main+0x6>
  fa:	83 e0       	ldi	r24, 0x03	; 3
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	cd df       	rcall	.-102    	; 0x9a <get_button>
 100:	89 2b       	or	r24, r25
 102:	e1 f2       	breq	.-72     	; 0xbc <main+0x6>
				delay+=change_rate;
 104:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <change_rate>
 108:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <change_rate+0x1>
 10c:	c8 0f       	add	r28, r24
 10e:	d9 1f       	adc	r29, r25
		PORTB |=(1<<port);
 110:	c0 9a       	sbi	0x18, 0	; 24
	if(x==0){
 112:	81 e0       	ldi	r24, 0x01	; 1
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	97 df       	rcall	.-210    	; 0x46 <change.part.0>
        		delay_ms(delay);
 118:	ce 01       	movw	r24, r28
 11a:	a0 df       	rcall	.-192    	; 0x5c <delay_ms>
	if(x==0){
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	80 e0       	ldi	r24, 0x00	; 0
 120:	92 df       	rcall	.-220    	; 0x46 <change.part.0>
		PORTB |=(1<<port);
 122:	c1 9a       	sbi	0x18, 1	; 24
       			delay_ms(delay); 
 124:	ce 01       	movw	r24, r28
 126:	9a df       	rcall	.-204    	; 0x5c <delay_ms>
			for(int i=0;i<scale&&get_button(3);i++){
 128:	0f 5f       	subi	r16, 0xFF	; 255
 12a:	1f 4f       	sbci	r17, 0xFF	; 255
 12c:	df cf       	rjmp	.-66     	; 0xec <main+0x36>
			for(int i=0;i<scale&&get_button(3);i++){
 12e:	83 e0       	ldi	r24, 0x03	; 3
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	b3 df       	rcall	.-154    	; 0x9a <get_button>
 134:	89 2b       	or	r24, r25
 136:	c1 f2       	breq	.-80     	; 0xe8 <main+0x32>
				delay-=change_rate;
 138:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <change_rate>
 13c:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <change_rate+0x1>
 140:	c8 1b       	sub	r28, r24
 142:	d9 0b       	sbc	r29, r25
		PORTB |=(1<<port);
 144:	c0 9a       	sbi	0x18, 0	; 24
	if(x==0){
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	7d df       	rcall	.-262    	; 0x46 <change.part.0>
        		delay_ms(delay);
 14c:	ce 01       	movw	r24, r28
 14e:	86 df       	rcall	.-244    	; 0x5c <delay_ms>
	if(x==0){
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	80 e0       	ldi	r24, 0x00	; 0
 154:	78 df       	rcall	.-272    	; 0x46 <change.part.0>
		PORTB |=(1<<port);
 156:	c1 9a       	sbi	0x18, 1	; 24
       			delay_ms(delay); 
 158:	ce 01       	movw	r24, r28
 15a:	80 df       	rcall	.-256    	; 0x5c <delay_ms>
			for(int i=0;i<scale&&get_button(3);i++){
 15c:	0f 5f       	subi	r16, 0xFF	; 255
 15e:	1f 4f       	sbci	r17, 0xFF	; 255
 160:	bc cf       	rjmp	.-136    	; 0xda <main+0x24>
		PORTB |=(1<<port);
 162:	c2 9a       	sbi	0x18, 2	; 24
	if(x==0){
 164:	81 e0       	ldi	r24, 0x01	; 1
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	6e df       	rcall	.-292    	; 0x46 <change.part.0>
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	80 e0       	ldi	r24, 0x00	; 0
 16e:	6b df       	rcall	.-298    	; 0x46 <change.part.0>
 170:	a5 cf       	rjmp	.-182    	; 0xbc <main+0x6>

00000172 <_exit>:
 172:	f8 94       	cli

00000174 <__stop_program>:
 174:	ff cf       	rjmp	.-2      	; 0x174 <__stop_program>
