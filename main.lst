   1               		.file	"main.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  11               	change.part.0:
  12               	.LVL0:
  13               	.LFB15:
  14               		.file 1 "main.c"
   1:main.c        **** #include "avr_compiler.h"
   2:main.c        **** int change_rate = 1;
   3:main.c        **** int start = 100;
   4:main.c        **** int scale = 100;
   5:main.c        **** int main(){
   6:main.c        **** 	DDRB = 0b000111; // sets 0-2 as outputs
   7:main.c        **** 	PORTB |= (1 << 3); // enables pull-up resistor
   8:main.c        ****     while (true) {
   9:main.c        **** 		if(get_button(3)){
  10:main.c        **** 			change(0,2);
  11:main.c        **** 			int delay = start;
  12:main.c        **** 			for(int i=0;i<scale&&get_button(3);i++){
  13:main.c        **** 				delay-=change_rate;
  14:main.c        **** 				change(1,0);
  15:main.c        **** 				change(0,1);
  16:main.c        ****         		delay_ms(delay);
  17:main.c        **** 				change(0,0);
  18:main.c        **** 				change(1,1);
  19:main.c        ****        			delay_ms(delay); 
  20:main.c        **** 			}
  21:main.c        **** 			for(int i=0;i<scale&&get_button(3);i++){
  22:main.c        **** 				delay+=change_rate;
  23:main.c        **** 				change(1,0);
  24:main.c        **** 				change(0,1);
  25:main.c        ****         		delay_ms(delay);
  26:main.c        **** 				change(0,0);
  27:main.c        **** 				change(1,1);
  28:main.c        ****        			delay_ms(delay); 
  29:main.c        **** 			}
  30:main.c        **** 		}else{
  31:main.c        **** 			change(1,2);
  32:main.c        **** 			change(0,1);
  33:main.c        **** 			change(0,0);
  34:main.c        **** 		}
  35:main.c        ****     } 
  36:main.c        **** }
  37:main.c        **** void delay_ms(int ms ){
  38:main.c        ****    	for (int i = 0; i < ms; i++){
  39:main.c        ****       	_delay_ms(1);
  40:main.c        ****    	}
  41:main.c        **** }
  42:main.c        **** void change(int x, int port){
  15               		.loc 1 42 6 view -0
  16               		.cfi_startproc
  17               	/* prologue: function */
  18               	/* frame size = 0 */
  19               	/* stack size = 0 */
  20               	.L__stack_usage = 0
  43:main.c        **** 	if(x==0){
  44:main.c        **** 		PORTB &=~(1<<port);
  21               		.loc 1 44 3 view .LVU1
  22               		.loc 1 44 9 is_stmt 0 view .LVU2
  23 0000 98B3      		in r25,0x18
  24               		.loc 1 44 14 view .LVU3
  25 0002 21E0      		ldi r18,lo8(1)
  26 0004 30E0      		ldi r19,0
  27 0006 00C0      		rjmp 2f
  28               		1:
  29 0008 220F      		lsl r18
  30               		2:
  31 000a 8A95      		dec r24
  32 000c 02F4      		brpl 1b
  33               		.loc 1 44 9 view .LVU4
  34 000e 2095      		com r18
  35 0010 2923      		and r18,r25
  36 0012 28BB      		out 0x18,r18
  37               	/* epilogue start */
  45:main.c        **** 	}else{
  46:main.c        **** 		PORTB |=(1<<port);
  47:main.c        **** 	}
  48:main.c        **** }  
  38               		.loc 1 48 1 view .LVU5
  39 0014 0895      		ret
  40               		.cfi_endproc
  41               	.LFE15:
  43               	.global	delay_ms
  45               	delay_ms:
  46               	.LVL1:
  47               	.LFB12:
  37:main.c        ****    	for (int i = 0; i < ms; i++){
  48               		.loc 1 37 23 is_stmt 1 view -0
  49               		.cfi_startproc
  50               	/* prologue: function */
  51               	/* frame size = 0 */
  52               	/* stack size = 0 */
  53               	.L__stack_usage = 0
  37:main.c        ****    	for (int i = 0; i < ms; i++){
  54               		.loc 1 37 23 is_stmt 0 view .LVU7
  55 0016 9C01      		movw r18,r24
  38:main.c        ****       	_delay_ms(1);
  56               		.loc 1 38 5 is_stmt 1 view .LVU8
  57               	.LBB36:
  38:main.c        ****       	_delay_ms(1);
  58               		.loc 1 38 10 view .LVU9
  59               	.LVL2:
  38:main.c        ****       	_delay_ms(1);
  60               		.loc 1 38 14 is_stmt 0 view .LVU10
  61 0018 90E0      		ldi r25,0
  62 001a 80E0      		ldi r24,0
  63               	.LVL3:
  64               	.L3:
  38:main.c        ****       	_delay_ms(1);
  65               		.loc 1 38 21 is_stmt 1 discriminator 1 view .LVU11
  38:main.c        ****       	_delay_ms(1);
  66               		.loc 1 38 5 is_stmt 0 discriminator 1 view .LVU12
  67 001c 8217      		cp r24,r18
  68 001e 9307      		cpc r25,r19
  69 0020 04F0      		brlt .L4
  70               	/* epilogue start */
  71               	.LBE36:
  41:main.c        **** void change(int x, int port){
  72               		.loc 1 41 1 view .LVU13
  73 0022 0895      		ret
  74               	.L4:
  75               	.LBB39:
  39:main.c        ****    	}
  76               		.loc 1 39 8 is_stmt 1 view .LVU14
  77               	.LVL4:
  78               	.LBB37:
  79               	.LBI37:
  80               		.file 2 "/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h"
   1:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** 
   6:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** 
   9:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** 
  12:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****      distribution.
  16:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** 
  17:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** 
  21:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** 
  33:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** /* $Id: delay.h.in 2506 2016-02-08 10:05:45Z joerg_wunsch $ */
  34:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** 
  35:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** 
  38:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** #ifndef __DOXYGEN__
  39:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** #  endif
  42:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** #endif  /* __DOXYGEN__ */
  43:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** 
  44:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** #include <inttypes.h>
  45:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** #include <util/delay_basic.h>
  46:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** #include <math.h>
  47:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** 
  48:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** /** \file */
  49:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****     \code
  51:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  53:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****     #include <util/delay.h>
  54:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****     \endcode
  55:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** 
  56:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  57:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****     used.
  60:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** 
  61:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  62:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  64:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  66:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  67:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  69:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** 
  70:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  71:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  73:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  75:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  76:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  77:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****     routines linked into the application.
  78:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** 
  79:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  80:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  81:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** 
  83:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** */
  84:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** 
  85:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  86:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** #endif
  89:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** 
  90:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** #ifndef F_CPU
  91:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  92:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** /** \ingroup util_delay
  94:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****     \def F_CPU
  95:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****     \brief CPU frequency in Hz
  96:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** 
  97:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****     the delay macros.  This macro is normally supplied by the
  99:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****     environment (e.g. from within a project header, or the project's
 100:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****     fallback if no such user-provided definition could be found.
 102:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** 
 103:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****     integer value.
 107:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****  */
 108:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** # define F_CPU 1000000UL
 109:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** #endif
 110:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** 
 111:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
 112:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** #endif
 114:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** 
 115:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****   __STDC_HOSTED__
 118:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** #  include <math.h>
 119:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** #endif
 120:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** 
 121:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** /**
 122:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****    \ingroup util_delay
 123:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** 
 124:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** 
 126:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 127:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** 
 129:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** 
 131:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 132:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 136:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** 
 137:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 140:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****    no delay i.e., 0ms.
 141:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** 
 142:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****    microseconds of delay.
 146:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** 
 147:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****    respectively.
 151:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** 
 152:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****    \note
 153:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** 
 154:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 155:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 157:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 159:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 160:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****    not available to the compiler then.
 163:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** 
 164:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****  */
 165:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** void
 166:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** _delay_ms(double __ms)
  81               		.loc 2 166 1 view .LVU15
  82               	.LBB38:
 167:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** {
 168:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** 	double __tmp ;
  83               		.loc 2 168 2 view .LVU16
 169:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h ****   __STDC_HOSTED__
 172:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
  84               		.loc 2 172 2 view .LVU17
 173:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
  85               		.loc 2 173 2 view .LVU18
 174:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
  86               		.loc 2 174 2 view .LVU19
 175:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** 
 176:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** 
 179:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** 
 182:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** 	#else
 183:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** 		//round up by default
 184:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
  87               		.loc 2 184 3 view .LVU20
 185:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** 	#endif
 186:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** 
 187:/usr/local/Cellar/avr-gcc/9.3.0/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
  88               		.loc 2 187 2 view .LVU21
  89 0024 EFEC      		ldi r30,lo8(1999)
  90 0026 F7E0      		ldi r31,hi8(1999)
  91 0028 3197      	1:	sbiw r30,1
  92 002a 01F4      		brne 1b
  93 002c 00C0      		rjmp .
  94 002e 0000      		nop
  95               	.LVL5:
  96               		.loc 2 187 2 is_stmt 0 view .LVU22
  97               	.LBE38:
  98               	.LBE37:
  38:main.c        ****       	_delay_ms(1);
  99               		.loc 1 38 29 is_stmt 1 view .LVU23
  38:main.c        ****       	_delay_ms(1);
 100               		.loc 1 38 30 is_stmt 0 view .LVU24
 101 0030 0196      		adiw r24,1
 102               	.LVL6:
  38:main.c        ****       	_delay_ms(1);
 103               		.loc 1 38 30 view .LVU25
 104 0032 00C0      		rjmp .L3
 105               	.LBE39:
 106               		.cfi_endproc
 107               	.LFE12:
 109               	.global	change
 111               	change:
 112               	.LVL7:
 113               	.LFB13:
  42:main.c        **** 	if(x==0){
 114               		.loc 1 42 29 is_stmt 1 view -0
 115               		.cfi_startproc
 116               	/* prologue: function */
 117               	/* frame size = 0 */
 118               	/* stack size = 0 */
 119               	.L__stack_usage = 0
  42:main.c        **** 	if(x==0){
 120               		.loc 1 42 29 is_stmt 0 view .LVU27
 121 0034 9C01      		movw r18,r24
 122 0036 972F      		mov r25,r23
  43:main.c        **** 		PORTB &=~(1<<port);
 123               		.loc 1 43 2 is_stmt 1 view .LVU28
  43:main.c        **** 		PORTB &=~(1<<port);
 124               		.loc 1 43 4 is_stmt 0 view .LVU29
 125 0038 232B      		or r18,r19
 126 003a 01F4      		brne .L6
 127 003c 862F      		mov r24,r22
 128               	.LVL8:
  43:main.c        **** 		PORTB &=~(1<<port);
 129               		.loc 1 43 4 view .LVU30
 130 003e 00C0      		rjmp change.part.0
 131               	.LVL9:
 132               	.L6:
  46:main.c        **** 	}
 133               		.loc 1 46 3 is_stmt 1 view .LVU31
  46:main.c        **** 	}
 134               		.loc 1 46 9 is_stmt 0 view .LVU32
 135 0040 88B3      		in r24,0x18
  46:main.c        **** 	}
 136               		.loc 1 46 13 view .LVU33
 137 0042 21E0      		ldi r18,lo8(1)
 138 0044 30E0      		ldi r19,0
 139               	.LVL10:
  46:main.c        **** 	}
 140               		.loc 1 46 13 view .LVU34
 141 0046 00C0      		rjmp 2f
 142               		1:
 143 0048 220F      		lsl r18
 144               		2:
 145 004a 6A95      		dec r22
 146 004c 02F4      		brpl 1b
  46:main.c        **** 	}
 147               		.loc 1 46 9 view .LVU35
 148 004e 822B      		or r24,r18
 149 0050 88BB      		out 0x18,r24
 150               	/* epilogue start */
 151               		.loc 1 48 1 view .LVU36
 152 0052 0895      		ret
 153               		.cfi_endproc
 154               	.LFE13:
 156               	.global	get_button
 158               	get_button:
 159               	.LVL11:
 160               	.LFB14:
  49:main.c        **** get_button(int port){
 161               		.loc 1 49 21 is_stmt 1 view -0
 162               		.cfi_startproc
 163               	/* prologue: function */
 164               	/* frame size = 0 */
 165               	/* stack size = 0 */
 166               	.L__stack_usage = 0
  50:main.c        **** 	if(!(PINB & (1<<port))){
 167               		.loc 1 50 2 view .LVU38
 168               		.loc 1 50 7 is_stmt 0 view .LVU39
 169 0054 26B3      		in r18,0x16
 170 0056 30E0      		ldi r19,0
 171               		.loc 1 50 5 view .LVU40
 172 0058 A901      		movw r20,r18
 173 005a 00C0      		rjmp 2f
 174               		1:
 175 005c 5595      		asr r21
 176 005e 4795      		ror r20
 177               		2:
 178 0060 8A95      		dec r24
 179 0062 02F4      		brpl 1b
 180 0064 CA01      		movw r24,r20
 181               	.LVL12:
 182               		.loc 1 50 5 view .LVU41
 183 0066 8095      		com r24
 184 0068 9095      		com r25
  51:main.c        **** 		return true;
  52:main.c        **** 	}else{
  53:main.c        **** 		return false;
  54:main.c        **** 	}
  55:main.c        **** }
 185               		.loc 1 55 1 view .LVU42
 186 006a 8170      		andi r24,1
 187 006c 9927      		clr r25
 188               	/* epilogue start */
 189 006e 0895      		ret
 190               		.cfi_endproc
 191               	.LFE14:
 193               		.section	.text.startup,"ax",@progbits
 194               	.global	main
 196               	main:
 197               	.LFB11:
   5:main.c        **** 	DDRB = 0b000111; // sets 0-2 as outputs
 198               		.loc 1 5 11 is_stmt 1 view -0
 199               		.cfi_startproc
 200               	/* prologue: function */
 201               	/* frame size = 0 */
 202               	/* stack size = 0 */
 203               	.L__stack_usage = 0
   6:main.c        **** 	PORTB |= (1 << 3); // enables pull-up resistor
 204               		.loc 1 6 2 view .LVU44
   6:main.c        **** 	PORTB |= (1 << 3); // enables pull-up resistor
 205               		.loc 1 6 7 is_stmt 0 view .LVU45
 206 0000 87E0      		ldi r24,lo8(7)
 207 0002 87BB      		out 0x17,r24
   7:main.c        ****     while (true) {
 208               		.loc 1 7 2 is_stmt 1 view .LVU46
   7:main.c        ****     while (true) {
 209               		.loc 1 7 8 is_stmt 0 view .LVU47
 210 0004 C39A      		sbi 0x18,3
 211               	.L9:
   8:main.c        **** 		if(get_button(3)){
 212               		.loc 1 8 5 is_stmt 1 view .LVU48
   9:main.c        **** 			change(0,2);
 213               		.loc 1 9 3 view .LVU49
 214               	.LBB40:
   9:main.c        **** 			change(0,2);
 215               		.loc 1 9 6 is_stmt 0 view .LVU50
 216 0006 83E0      		ldi r24,lo8(3)
 217 0008 90E0      		ldi r25,0
 218 000a 00D0      		rcall get_button
 219               	.LVL13:
   9:main.c        **** 			change(0,2);
 220               		.loc 1 9 5 view .LVU51
 221 000c 892B      		or r24,r25
 222 000e 01F4      		brne .+2
 223 0010 00C0      		rjmp .L10
 224               	.LBB41:
  10:main.c        **** 			int delay = start;
 225               		.loc 1 10 4 is_stmt 1 view .LVU52
 226               	.LVL14:
 227               	.LBB42:
 228               	.LBI42:
  42:main.c        **** 	if(x==0){
 229               		.loc 1 42 6 view .LVU53
 230               	.LBB43:
  43:main.c        **** 		PORTB &=~(1<<port);
 231               		.loc 1 43 2 view .LVU54
 232 0012 82E0      		ldi r24,lo8(2)
 233 0014 90E0      		ldi r25,0
 234 0016 00D0      		rcall change.part.0
 235               	.LVL15:
  43:main.c        **** 		PORTB &=~(1<<port);
 236               		.loc 1 43 2 is_stmt 0 view .LVU55
 237               	.LBE43:
 238               	.LBE42:
  11:main.c        **** 			for(int i=0;i<scale&&get_button(3);i++){
 239               		.loc 1 11 4 is_stmt 1 view .LVU56
  11:main.c        **** 			for(int i=0;i<scale&&get_button(3);i++){
 240               		.loc 1 11 8 is_stmt 0 view .LVU57
 241 0018 C091 0000 		lds r28,start
 242 001c D091 0000 		lds r29,start+1
 243               	.LVL16:
  12:main.c        **** 				delay-=change_rate;
 244               		.loc 1 12 4 is_stmt 1 view .LVU58
 245               	.LBB44:
  12:main.c        **** 				delay-=change_rate;
 246               		.loc 1 12 8 view .LVU59
  12:main.c        **** 				delay-=change_rate;
 247               		.loc 1 12 12 is_stmt 0 view .LVU60
 248 0020 10E0      		ldi r17,0
 249 0022 00E0      		ldi r16,0
 250               	.LVL17:
 251               	.L11:
  12:main.c        **** 				delay-=change_rate;
 252               		.loc 1 12 16 is_stmt 1 discriminator 1 view .LVU61
  12:main.c        **** 				delay-=change_rate;
 253               		.loc 1 12 4 is_stmt 0 discriminator 1 view .LVU62
 254 0024 8091 0000 		lds r24,scale
 255 0028 9091 0000 		lds r25,scale+1
 256 002c 0817      		cp r16,r24
 257 002e 1907      		cpc r17,r25
 258 0030 04F0      		brlt .L12
 259               	.L15:
  12:main.c        **** 				delay-=change_rate;
 260               		.loc 1 12 12 view .LVU63
 261 0032 10E0      		ldi r17,0
 262 0034 00E0      		ldi r16,0
 263               	.LVL18:
 264               	.L13:
  12:main.c        **** 				delay-=change_rate;
 265               		.loc 1 12 12 view .LVU64
 266               	.LBE44:
 267               	.LBB54:
  21:main.c        **** 				delay+=change_rate;
 268               		.loc 1 21 16 is_stmt 1 discriminator 1 view .LVU65
  21:main.c        **** 				delay+=change_rate;
 269               		.loc 1 21 4 is_stmt 0 discriminator 1 view .LVU66
 270 0036 8091 0000 		lds r24,scale
 271 003a 9091 0000 		lds r25,scale+1
 272 003e 0817      		cp r16,r24
 273 0040 1907      		cpc r17,r25
 274 0042 04F4      		brge .L9
  21:main.c        **** 				delay+=change_rate;
 275               		.loc 1 21 25 discriminator 3 view .LVU67
 276 0044 83E0      		ldi r24,lo8(3)
 277 0046 90E0      		ldi r25,0
 278 0048 00D0      		rcall get_button
 279               	.LVL19:
  21:main.c        **** 				delay+=change_rate;
 280               		.loc 1 21 23 discriminator 3 view .LVU68
 281 004a 892B      		or r24,r25
 282 004c 01F0      		breq .L9
 283               	.LBB55:
  22:main.c        **** 				change(1,0);
 284               		.loc 1 22 5 is_stmt 1 discriminator 4 view .LVU69
  22:main.c        **** 				change(1,0);
 285               		.loc 1 22 10 is_stmt 0 discriminator 4 view .LVU70
 286 004e 8091 0000 		lds r24,change_rate
 287 0052 9091 0000 		lds r25,change_rate+1
 288 0056 C80F      		add r28,r24
 289 0058 D91F      		adc r29,r25
 290               	.LVL20:
  23:main.c        **** 				change(0,1);
 291               		.loc 1 23 5 is_stmt 1 discriminator 4 view .LVU71
 292               	.LBB56:
 293               	.LBI56:
  42:main.c        **** 	if(x==0){
 294               		.loc 1 42 6 discriminator 4 view .LVU72
 295               	.LBB57:
  43:main.c        **** 		PORTB &=~(1<<port);
 296               		.loc 1 43 2 discriminator 4 view .LVU73
  46:main.c        **** 	}
 297               		.loc 1 46 3 discriminator 4 view .LVU74
  46:main.c        **** 	}
 298               		.loc 1 46 9 is_stmt 0 discriminator 4 view .LVU75
 299 005a C09A      		sbi 0x18,0
 300               	.LVL21:
  46:main.c        **** 	}
 301               		.loc 1 46 9 discriminator 4 view .LVU76
 302               	.LBE57:
 303               	.LBE56:
  24:main.c        ****         		delay_ms(delay);
 304               		.loc 1 24 5 is_stmt 1 discriminator 4 view .LVU77
 305               	.LBB58:
 306               	.LBI58:
  42:main.c        **** 	if(x==0){
 307               		.loc 1 42 6 discriminator 4 view .LVU78
 308               	.LBB59:
  43:main.c        **** 		PORTB &=~(1<<port);
 309               		.loc 1 43 2 discriminator 4 view .LVU79
 310 005c 81E0      		ldi r24,lo8(1)
 311 005e 90E0      		ldi r25,0
 312 0060 00D0      		rcall change.part.0
 313               	.LVL22:
  43:main.c        **** 		PORTB &=~(1<<port);
 314               		.loc 1 43 2 is_stmt 0 discriminator 4 view .LVU80
 315               	.LBE59:
 316               	.LBE58:
  25:main.c        **** 				change(0,0);
 317               		.loc 1 25 11 is_stmt 1 discriminator 4 view .LVU81
 318 0062 CE01      		movw r24,r28
 319 0064 00D0      		rcall delay_ms
 320               	.LVL23:
  26:main.c        **** 				change(1,1);
 321               		.loc 1 26 5 discriminator 4 view .LVU82
 322               	.LBB60:
 323               	.LBI60:
  42:main.c        **** 	if(x==0){
 324               		.loc 1 42 6 discriminator 4 view .LVU83
 325               	.LBB61:
  43:main.c        **** 		PORTB &=~(1<<port);
 326               		.loc 1 43 2 discriminator 4 view .LVU84
 327 0066 90E0      		ldi r25,0
 328 0068 80E0      		ldi r24,0
 329 006a 00D0      		rcall change.part.0
 330               	.LVL24:
  43:main.c        **** 		PORTB &=~(1<<port);
 331               		.loc 1 43 2 is_stmt 0 discriminator 4 view .LVU85
 332               	.LBE61:
 333               	.LBE60:
  27:main.c        ****        			delay_ms(delay); 
 334               		.loc 1 27 5 is_stmt 1 discriminator 4 view .LVU86
 335               	.LBB62:
 336               	.LBI62:
  42:main.c        **** 	if(x==0){
 337               		.loc 1 42 6 discriminator 4 view .LVU87
 338               	.LBB63:
  43:main.c        **** 		PORTB &=~(1<<port);
 339               		.loc 1 43 2 discriminator 4 view .LVU88
  46:main.c        **** 	}
 340               		.loc 1 46 3 discriminator 4 view .LVU89
  46:main.c        **** 	}
 341               		.loc 1 46 9 is_stmt 0 discriminator 4 view .LVU90
 342 006c C19A      		sbi 0x18,1
 343               	.LVL25:
  46:main.c        **** 	}
 344               		.loc 1 46 9 discriminator 4 view .LVU91
 345               	.LBE63:
 346               	.LBE62:
  28:main.c        **** 			}
 347               		.loc 1 28 11 is_stmt 1 discriminator 4 view .LVU92
 348 006e CE01      		movw r24,r28
 349 0070 00D0      		rcall delay_ms
 350               	.LVL26:
 351               	.LBE55:
  21:main.c        **** 				delay+=change_rate;
 352               		.loc 1 21 39 discriminator 4 view .LVU93
  21:main.c        **** 				delay+=change_rate;
 353               		.loc 1 21 40 is_stmt 0 discriminator 4 view .LVU94
 354 0072 0F5F      		subi r16,-1
 355 0074 1F4F      		sbci r17,-1
 356               	.LVL27:
  21:main.c        **** 				delay+=change_rate;
 357               		.loc 1 21 40 discriminator 4 view .LVU95
 358 0076 00C0      		rjmp .L13
 359               	.LVL28:
 360               	.L12:
  21:main.c        **** 				delay+=change_rate;
 361               		.loc 1 21 40 discriminator 4 view .LVU96
 362               	.LBE54:
 363               	.LBB64:
  12:main.c        **** 				delay-=change_rate;
 364               		.loc 1 12 25 discriminator 3 view .LVU97
 365 0078 83E0      		ldi r24,lo8(3)
 366 007a 90E0      		ldi r25,0
 367 007c 00D0      		rcall get_button
 368               	.LVL29:
  12:main.c        **** 				delay-=change_rate;
 369               		.loc 1 12 23 discriminator 3 view .LVU98
 370 007e 892B      		or r24,r25
 371 0080 01F0      		breq .L15
 372               	.LBB45:
  13:main.c        **** 				change(1,0);
 373               		.loc 1 13 5 is_stmt 1 discriminator 4 view .LVU99
  13:main.c        **** 				change(1,0);
 374               		.loc 1 13 10 is_stmt 0 discriminator 4 view .LVU100
 375 0082 8091 0000 		lds r24,change_rate
 376 0086 9091 0000 		lds r25,change_rate+1
 377 008a C81B      		sub r28,r24
 378 008c D90B      		sbc r29,r25
 379               	.LVL30:
  14:main.c        **** 				change(0,1);
 380               		.loc 1 14 5 is_stmt 1 discriminator 4 view .LVU101
 381               	.LBB46:
 382               	.LBI46:
  42:main.c        **** 	if(x==0){
 383               		.loc 1 42 6 discriminator 4 view .LVU102
 384               	.LBB47:
  43:main.c        **** 		PORTB &=~(1<<port);
 385               		.loc 1 43 2 discriminator 4 view .LVU103
  46:main.c        **** 	}
 386               		.loc 1 46 3 discriminator 4 view .LVU104
  46:main.c        **** 	}
 387               		.loc 1 46 9 is_stmt 0 discriminator 4 view .LVU105
 388 008e C09A      		sbi 0x18,0
 389               	.LVL31:
  46:main.c        **** 	}
 390               		.loc 1 46 9 discriminator 4 view .LVU106
 391               	.LBE47:
 392               	.LBE46:
  15:main.c        ****         		delay_ms(delay);
 393               		.loc 1 15 5 is_stmt 1 discriminator 4 view .LVU107
 394               	.LBB48:
 395               	.LBI48:
  42:main.c        **** 	if(x==0){
 396               		.loc 1 42 6 discriminator 4 view .LVU108
 397               	.LBB49:
  43:main.c        **** 		PORTB &=~(1<<port);
 398               		.loc 1 43 2 discriminator 4 view .LVU109
 399 0090 81E0      		ldi r24,lo8(1)
 400 0092 90E0      		ldi r25,0
 401 0094 00D0      		rcall change.part.0
 402               	.LVL32:
  43:main.c        **** 		PORTB &=~(1<<port);
 403               		.loc 1 43 2 is_stmt 0 discriminator 4 view .LVU110
 404               	.LBE49:
 405               	.LBE48:
  16:main.c        **** 				change(0,0);
 406               		.loc 1 16 11 is_stmt 1 discriminator 4 view .LVU111
 407 0096 CE01      		movw r24,r28
 408 0098 00D0      		rcall delay_ms
 409               	.LVL33:
  17:main.c        **** 				change(1,1);
 410               		.loc 1 17 5 discriminator 4 view .LVU112
 411               	.LBB50:
 412               	.LBI50:
  42:main.c        **** 	if(x==0){
 413               		.loc 1 42 6 discriminator 4 view .LVU113
 414               	.LBB51:
  43:main.c        **** 		PORTB &=~(1<<port);
 415               		.loc 1 43 2 discriminator 4 view .LVU114
 416 009a 90E0      		ldi r25,0
 417 009c 80E0      		ldi r24,0
 418 009e 00D0      		rcall change.part.0
 419               	.LVL34:
  43:main.c        **** 		PORTB &=~(1<<port);
 420               		.loc 1 43 2 is_stmt 0 discriminator 4 view .LVU115
 421               	.LBE51:
 422               	.LBE50:
  18:main.c        ****        			delay_ms(delay); 
 423               		.loc 1 18 5 is_stmt 1 discriminator 4 view .LVU116
 424               	.LBB52:
 425               	.LBI52:
  42:main.c        **** 	if(x==0){
 426               		.loc 1 42 6 discriminator 4 view .LVU117
 427               	.LBB53:
  43:main.c        **** 		PORTB &=~(1<<port);
 428               		.loc 1 43 2 discriminator 4 view .LVU118
  46:main.c        **** 	}
 429               		.loc 1 46 3 discriminator 4 view .LVU119
  46:main.c        **** 	}
 430               		.loc 1 46 9 is_stmt 0 discriminator 4 view .LVU120
 431 00a0 C19A      		sbi 0x18,1
 432               	.LVL35:
  46:main.c        **** 	}
 433               		.loc 1 46 9 discriminator 4 view .LVU121
 434               	.LBE53:
 435               	.LBE52:
  19:main.c        **** 			}
 436               		.loc 1 19 11 is_stmt 1 discriminator 4 view .LVU122
 437 00a2 CE01      		movw r24,r28
 438 00a4 00D0      		rcall delay_ms
 439               	.LVL36:
 440               	.LBE45:
  12:main.c        **** 				delay-=change_rate;
 441               		.loc 1 12 39 discriminator 4 view .LVU123
  12:main.c        **** 				delay-=change_rate;
 442               		.loc 1 12 40 is_stmt 0 discriminator 4 view .LVU124
 443 00a6 0F5F      		subi r16,-1
 444 00a8 1F4F      		sbci r17,-1
 445               	.LVL37:
  12:main.c        **** 				delay-=change_rate;
 446               		.loc 1 12 40 discriminator 4 view .LVU125
 447 00aa 00C0      		rjmp .L11
 448               	.LVL38:
 449               	.L10:
  12:main.c        **** 				delay-=change_rate;
 450               		.loc 1 12 40 discriminator 4 view .LVU126
 451               	.LBE64:
 452               	.LBE41:
 453               	.LBB65:
  31:main.c        **** 			change(0,1);
 454               		.loc 1 31 4 is_stmt 1 view .LVU127
 455               	.LBB66:
 456               	.LBI66:
  42:main.c        **** 	if(x==0){
 457               		.loc 1 42 6 view .LVU128
 458               	.LBB67:
  43:main.c        **** 		PORTB &=~(1<<port);
 459               		.loc 1 43 2 view .LVU129
  46:main.c        **** 	}
 460               		.loc 1 46 3 view .LVU130
  46:main.c        **** 	}
 461               		.loc 1 46 9 is_stmt 0 view .LVU131
 462 00ac C29A      		sbi 0x18,2
 463               	.LVL39:
  46:main.c        **** 	}
 464               		.loc 1 46 9 view .LVU132
 465               	.LBE67:
 466               	.LBE66:
  32:main.c        **** 			change(0,0);
 467               		.loc 1 32 4 is_stmt 1 view .LVU133
 468               	.LBB68:
 469               	.LBI68:
  42:main.c        **** 	if(x==0){
 470               		.loc 1 42 6 view .LVU134
 471               	.LBB69:
  43:main.c        **** 		PORTB &=~(1<<port);
 472               		.loc 1 43 2 view .LVU135
 473 00ae 81E0      		ldi r24,lo8(1)
 474 00b0 90E0      		ldi r25,0
 475 00b2 00D0      		rcall change.part.0
 476               	.LVL40:
  43:main.c        **** 		PORTB &=~(1<<port);
 477               		.loc 1 43 2 is_stmt 0 view .LVU136
 478               	.LBE69:
 479               	.LBE68:
  33:main.c        **** 		}
 480               		.loc 1 33 4 is_stmt 1 view .LVU137
 481               	.LBB70:
 482               	.LBI70:
  42:main.c        **** 	if(x==0){
 483               		.loc 1 42 6 view .LVU138
 484               	.LBB71:
  43:main.c        **** 		PORTB &=~(1<<port);
 485               		.loc 1 43 2 view .LVU139
 486 00b4 90E0      		ldi r25,0
 487 00b6 80E0      		ldi r24,0
 488 00b8 00D0      		rcall change.part.0
 489               	.LVL41:
 490 00ba 00C0      		rjmp .L9
 491               	.LBE71:
 492               	.LBE70:
 493               	.LBE65:
 494               	.LBE40:
 495               		.cfi_endproc
 496               	.LFE11:
 498               	.global	scale
 499               		.data
 502               	scale:
 503 0000 6400      		.word	100
 504               	.global	start
 507               	start:
 508 0002 6400      		.word	100
 509               	.global	change_rate
 512               	change_rate:
 513 0004 0100      		.word	1
 514               		.text
 515               	.Letext0:
 516               		.file 3 "/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdint.h"
 517               		.file 4 "/usr/local/Cellar/avr-gcc/9.3.0/lib/avr-gcc/9/gcc/avr/9.3.0/include/stddef.h"
 518               		.file 5 "/usr/local/Cellar/avr-gcc/9.3.0/avr/include/stdlib.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
/var/folders/zp/t4dg0bvn1bvf9m568x4tpxlm0000gn/T//ccr4tLXA.s:2      *ABS*:000000000000003e __SP_H__
/var/folders/zp/t4dg0bvn1bvf9m568x4tpxlm0000gn/T//ccr4tLXA.s:3      *ABS*:000000000000003d __SP_L__
/var/folders/zp/t4dg0bvn1bvf9m568x4tpxlm0000gn/T//ccr4tLXA.s:4      *ABS*:000000000000003f __SREG__
/var/folders/zp/t4dg0bvn1bvf9m568x4tpxlm0000gn/T//ccr4tLXA.s:5      *ABS*:0000000000000000 __tmp_reg__
/var/folders/zp/t4dg0bvn1bvf9m568x4tpxlm0000gn/T//ccr4tLXA.s:6      *ABS*:0000000000000001 __zero_reg__
/var/folders/zp/t4dg0bvn1bvf9m568x4tpxlm0000gn/T//ccr4tLXA.s:11     .text:0000000000000000 change.part.0
/var/folders/zp/t4dg0bvn1bvf9m568x4tpxlm0000gn/T//ccr4tLXA.s:45     .text:0000000000000016 delay_ms
/var/folders/zp/t4dg0bvn1bvf9m568x4tpxlm0000gn/T//ccr4tLXA.s:111    .text:0000000000000034 change
/var/folders/zp/t4dg0bvn1bvf9m568x4tpxlm0000gn/T//ccr4tLXA.s:158    .text:0000000000000054 get_button
/var/folders/zp/t4dg0bvn1bvf9m568x4tpxlm0000gn/T//ccr4tLXA.s:196    .text.startup:0000000000000000 main
/var/folders/zp/t4dg0bvn1bvf9m568x4tpxlm0000gn/T//ccr4tLXA.s:507    .data:0000000000000002 start
/var/folders/zp/t4dg0bvn1bvf9m568x4tpxlm0000gn/T//ccr4tLXA.s:502    .data:0000000000000000 scale
/var/folders/zp/t4dg0bvn1bvf9m568x4tpxlm0000gn/T//ccr4tLXA.s:512    .data:0000000000000004 change_rate

UNDEFINED SYMBOLS
__do_copy_data
